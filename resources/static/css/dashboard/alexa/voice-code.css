.voice-code-container {
    display: block;
    width: 890px;
    min-height: 20rem;
    background-color: #fff;
    box-shadow: 0px 2px 30px #ccc6;
    margin: auto;
    position: relative;
    z-index: 1;
    margin-top: 7%;
    overflow: hidden;
}

#opt-out {
    width: 100%;
    display: inline-block;
    margin: 30px auto;
    text-align: center;
    line-height: 20px;
    font-weight: 400;
    font-size: 14px;
    color: #555;
}

.voice-code-entry {
    width: 500px;
    height: auto;
    background: #fff;
    box-sizing: border-box;
    padding: 50px 50px;
    border-radius: 2px;
    transition: all .1s ease-in-out;
    float: left;
    overflow-y: auto;
    display: table-cell;
    border-right: 2px solid #f1f1f1;
}

.security-information {
    width: 390px;
    height: auto;
    float: right;
    box-sizing: border-box;
    padding: 40px;
    background-color: #fff;
    display: table-cell;
}

.security-information-heading {
    display: block;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 10px;
    text-align: center;
    text-transform: uppercase;
}

.blitzbudget-logo {
    display: block;
    height: 30px;
    width: auto;
    margin-bottom: 20px;
    background: url('../img/business-name/business-logo-name.svg') no-repeat transparent;
    background-size: auto 100%;
}

.voice-code-head {
    display: block;
    font-size: 24px;
    font-weight: 500;
    margin-bottom: 30px;
    line-height: 30px;
    transition: all .1s ease-in-out;
}

.voice-code-service-name {
    display: block;
    font-size: 16px;
    color: #000;
    font-weight: 400;
}

.forgot-password,
a.forgot-password:hover {
    display: block;
    text-align: center;
    margin-bottom: 30px;
    color: #626262;
    font-size: 16px;
    font-weight: 500;
    text-decoration: none;
}

a.forgot-password:hover {
    text-decoration: underline;
}

.textbox {
    display: block;
    width: 100%;
    height: 44px;
    box-sizing: border-box;
    border-radius: 2px;
    text-indent: 12px;
    font-size: 16px;
    outline: none;
    border: none;
    padding-right: 12px;
    transition: all .2s ease-in-out;
    background: #f8f8f8;
    border: 1px solid #E4E4E4;
}

.security_text {
    display: block;
    font-size: 14px;
    line-height: 24px;
    margin-bottom: 20px;
    text-align: center;
}

.secure-image {
    display: block;
    height: 10rem;
    width: 10rem;
    background: url(/img/login/secure-voice-code.svg) no-repeat transparent;
    background-size: 100%;
    margin: auto;
    margin-bottom: 50px;
}

.errorborder {
    border: 2px solid #ff8484;
}

.errorlabel {
    color: #E92B2B;
}

.fielderror {
    font-size: 0.9rem;
}

.email-user {
    display: inline-block;
    margin-bottom: 2rem;
    line-height: 1.2rem;
    font-size: 1rem;
}

#email-address-display {
    max-width: 100%;
    font-weight: 600;
    overflow: hidden;
    text-overflow: ellipsis;
    padding-right: 10px;
    float: left;
}

.not-you {
    cursor: pointer;
}

.show_hide_password {
    font-size: 1.5rem;
    color: #a7a7a7;
    position: relative;
    top: -35px;
    right: 13px;
    float: right;
    cursor: pointer;
    height: 20px;
}

.material-spinner {
    /* The height and width can be
    whatever you want, so long as
    you adjust the border radius
    to compensate. I added a
    "max-height" because for some
    reason the spinner was
    "squishing" when I resized the
    screen vertically. "max-height"
    fixed this. */
    height: 50px;
    min-height: 50px;
    width: 50px;
    /* "border-radius" defines how
    much "curve" there is on the
    edge of a square element. If
    you give it enough curve, it
    makes the element appear to be
    circular. */
    border-radius: 100px;
    /* So there's a five pixel
    transparent solid border
    around a 50px square box, which
    has edges curved so much that
    it looks circular... */
    border: 5px transparent solid;
    /* ... with one side, the top
    border, given a color. This
    creates the quarter-circle
    curve. */
    border-top: 5px #3F51B5 solid;
    /* "animation" specifies an
    animation to use on the element,
    including how long the animation
    should take, how many times it
    should play, and even whether
    or not it should ease into the
    different steps of the animation.
    By default the animation eases,
    which is what we want for our
    Google-esque spinner, so we
    don't need to set that.

    The "material-spinner" part is
    the name of the animation that
    we want to use. We could've
    called it "funky-bunny" or
    anything else so long as we
    use the same name when
    specifying the keyframes. */
    animation: material-spinner 4s infinite;
}

@keyframes material-spinner {

    /* "material-spinner" is the name
    of the animation. Each percentage
    represents an individual step
    in the animation. The transform
    rotation needs to increase from
    0 throughout. If you did
    "rotate(0deg)" then
    "rotate(180deg)" and then
    "rotate(0deg)" back again,
    instead of continously spinning
    right, it would spin right,
    then left, then right.*/
    0% {
        transform: rotate(0deg);
        border-top: 5px #3F51B5 solid;
    }

    25% {
        transform: rotate(360deg);
        border-top: 5px #F44336 solid;
    }

    50% {
        transform: rotate(720deg);
        border-top: 5px #FFC107 solid;
    }

    75% {
        transform: rotate(1080deg);
        border-top: 5px #4CAF50 solid;
    }

    100% {
        transform: rotate(1440deg);
        border-top: 5px #3F51B5 solid;
    }
}
